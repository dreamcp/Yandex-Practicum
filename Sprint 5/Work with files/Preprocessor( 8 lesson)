#include <cassert>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <optional>
#include <regex>
#include <sstream>
#include <string>
#include <vector>

using namespace std;
using filesystem::path;


static regex reg1(R"(\s*#\s*include\s*\"([^\"]*)\"\s*)");
static regex reg2(R"(\s*#\s*include\s*<([^>]*)>\s*)");


path operator""_p(const char* data, std::size_t sz) {
    return path(data, data + sz);
}

path FindFile(const string& file, const path& curren_dir, const vector<path>& include_directories)
{
    ifstream ffile;
    path current_file(file);
    ffile.open(current_file);
    if(ffile.is_open())
        return current_file;

    current_file = curren_dir/file;
    ffile.open(current_file);
     if(ffile.is_open())
        return current_file;

    for ( auto& dir : include_directories) {
        current_file = dir/file;
        ffile.open(current_file);
        if(ffile.is_open())
            return current_file;
    }   
    return path(""); 
}


bool ParseInclude(ifstream& in, ofstream& out, const path& in_file, const vector<path>& include_directories)
{    
    string info;
    int string_number = 1;
    while(getline(in, info)){
        smatch m;
        
        if ( regex_match(info, m, reg1) || regex_match(info, m, reg2) )
        {                     
            path result = FindFile(string(m[1]), in_file.parent_path(), include_directories);
            if(result != path(""))
            {
                ifstream new_include(result);
                if(new_include.is_open())
                    if(!ParseInclude(new_include, out, result, include_directories))
                        return false;              
            }
            else {               
                cout << "unknown include file " << m[1] << " at file " << in_file.string() << " at line " << string_number <<endl;      
                return false;           
            }                                        
        }
        else
            out << info << endl;
        ++string_number;
    }
    return true;
}


// напишите эту функцию
bool Preprocess(const path& in_file, const path& out_file, const vector<path>& include_directories)
{

    ifstream file(in_file);
    if(!file){
        return false;
    }

    ofstream outf(out_file);
    if(!outf){
        return false;
    }

    return ParseInclude(file, outf, in_file, include_directories);
    
}

string GetFileContents(string file) {
    ifstream stream(file);

    // конструируем string по двум итераторам
    return {(istreambuf_iterator<char>(stream)), istreambuf_iterator<char>()};
}

void Test() {
    error_code err;
    filesystem::remove_all("sources"_p, err);
    filesystem::create_directories("sources"_p / "include2"_p / "lib"_p, err);
    filesystem::create_directories("sources"_p / "include1"_p, err);
    filesystem::create_directories("sources"_p / "dir1"_p / "subdir"_p, err);

    {
        ofstream file("sources/a.cpp");
        file << "// this comment before include\n"                
                "#include \"dir1/b.h\"\n"
                "// text between b.h and c.h\n"
                "#include \"dir1/d.h\"\n"
                "\n"
                "int SayHello() {\n"
                "    cout << \"hello, world!\" << endl;\n"
                "#   include<dummy.txt>\n"
                "}\n"s;
    }
    {
        ofstream file("sources/dir1/b.h");
        file << "// text from b.h before include\n"
                "#include \"subdir/c.h\"\n"
                "// text from b.h after include"s;
    }
    {
        ofstream file("sources/dir1/subdir/c.h");
        file << "// text from c.h before include\n"
                "#include <std1.h>\n"
                "// text from c.h after include\n"s;
    }
    {
        ofstream file("sources/dir1/d.h");
        file << "// text from d.h before include\n"
                "#include \"lib/std2.h\"\n"
                "// text from d.h after include\n"s;
    }
    {
        ofstream file("sources/include1/std1.h");
        file << "// std1\n"s;
    }
    {
        ofstream file("sources/include2/lib/std2.h");
        file << "// std2\n"s;
    }

    assert((!Preprocess("sources"_p / "a.cpp"_p, "sources"_p / "a.in"_p,
                                  {"sources"_p / "include1"_p,"sources"_p / "include2"_p})));

    ostringstream test_out;
    test_out << "// this comment before include\n"
                "// text from b.h before include\n"
                "// text from c.h before include\n"
                "// std1\n"
                "// text from c.h after include\n"
                "// text from b.h after include\n"
                "// text between b.h and c.h\n"
                "// text from d.h before include\n"
                "// std2\n"
                "// text from d.h after include\n"
                "\n"
                "int SayHello() {\n"
                "    cout << \"hello, world!\" << endl;\n"s;

    assert(GetFileContents("sources/a.in"s) == test_out.str());
}

int main() {
    Test();
}
